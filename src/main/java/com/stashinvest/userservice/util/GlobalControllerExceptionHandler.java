/**
 * 
 */
package com.stashinvest.userservice.util;

import java.io.IOException;
import java.util.Collections;
import java.util.Map;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletResponse;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;

import org.springframework.http.HttpStatus;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * This class contains method to handle Global exceptions generated by application
 * 
 * @author abhimanyu
 *
 */
@ControllerAdvice
public class GlobalControllerExceptionHandler {

	/**
	 * Handler for IllegalArgumentException
	 * @param response
	 * @throws IOException
	 */
	@ExceptionHandler({ IllegalArgumentException.class })
	public void handleMarlformedQueryParam(HttpServletResponse response) throws IOException {
		response.sendError(HttpStatus.UNPROCESSABLE_ENTITY.value());
	}

	/**
	 * Handler for Exception
	 * 
	 * @param response
	 * @throws IOException
	 */
	@ExceptionHandler({ Exception.class })
	public void handleServerError(HttpServletResponse response) throws IOException {
		response.sendError(HttpStatus.INTERNAL_SERVER_ERROR.value());
	}

	/**
	 * Handler for MethodArgumentNotValidException
	 * 
	 * @param exception
	 * @return
	 */
	@ExceptionHandler
	@ResponseBody
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	public Map handle(MethodArgumentNotValidException exception) {
		return error(exception.getBindingResult().getFieldErrors().stream().map(FieldError::getDefaultMessage)
				.collect(Collectors.toList()));
	}

	/**
	 * Handler for MethodArgumentNotValidException 
	 *
	 * @param exception
	 * @return
	 */
	@ExceptionHandler
	@ResponseBody
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	public Map handle(ConstraintViolationException exception) {
		return error(exception.getConstraintViolations().stream().map(ConstraintViolation::getMessage)
				.collect(Collectors.toList()));
	}

	/**
	 * @param message
	 * @return
	 */
	private Map error(Object message) {
		return Collections.singletonMap("errors", message);
	}

}
